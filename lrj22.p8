pico-8 cartridge // http://www.pico-8.com
version 36
__lua__
--lowrezjam 2022

function _init()
	--mode 3 for 64x64 res
	poke(0x5f2c,3)
	
	init_player()
	init_map()
	init_farm()
	init_ui()
end

function _update()
	if not active_text then
		update_player()
	end
end

function _draw()
	cls()
	draw_map()
	draw_player()
	draw_crops()
	draw_text()
end

-->8
--player

function init_player()
	p={}
	p.x=11 --position
	p.y=2
	p.sprr=10 --facing right
	p.sprl=11 --facing left
	p.spr=p.sprr --current sprite
	p.gold=0 --money
	p.seeds={0,0,0,0} --seed inv
	p.crops={0,0,0,0} --crop inv
	p.carrotseed=false --temp
	p.carrot=false --temp
	p.axeseed=false
	p.axe=false
end

function update_player()
	local dx=p.x
	local dy=p.y
	
	if (btnp(⬅️)) then
		dx-=1
		p.spr=p.sprl
	end
	if (btnp(➡️)) then
		dx+=1
		p.spr=p.sprr
	end
	if (btnp(⬆️)) dy-=1
	if (btnp(⬇️)) dy+=1
	
	if can_move(dx,dy) then
		p.x=mid(0,dx,127)
		p.y=mid(0,dy,63)
	end
	
	interact(dx,dy)
end

function draw_player()
	spr(p.spr,p.x*8,p.y*8)
end

function interact(x,y)
	dia(get_text(x,y))
	run_func(x,y)
	
	if is_tile(plot,x,y) then
		farm(x,y)
	elseif is_tile(tree,x,y) then
		chop(x,y)
	end
end

-->8
--map

function init_map()
	--tile flags
	wall=0
	plot=1
	tree=2
	--map data
	funcs={}
	add_func(11,1,sleep)
	add_func(14,5,horse)
	--other
	sleep=false
	--progression
	givencarrotseed=false
	gavehorsecarrot=false
end

function add_func(x,y,func)
	funcs[x+y*128]=func
end

function has_func(x,y)
	return funcs[x+y*128]~=nil
end

function run_func(x,y)
	if (has_func(x,y)) funcs[x+y*128]()
end

function update_map()
end

function draw_map()
	mx=flr(p.x/8)*8
	my=flr(p.y/8)*8
	camera(mx*8,my*8)
	
	map(0,0,0,0,128,64)
end

function is_tile(flag,x,y)
	return fget(mget(x,y),flag)
end

function is_blocked(x,y)
	return fget(mget(x,y),0)
end

function can_move(x,y)
	return not is_blocked(x,y)
end

function chop(x,y)
	local tile=mget(x,y)
	if p.axe then
		mset(x,y,1)
		dia("you chopped\nthe tree!")
	else
		dia("a tree blocks\nyour path")
	end
end

function sleep()
	dia("you sleep for\nthe night")
	sleep=true
	grow_plots()
end

function horse()
	if not givencarrotseed then
		dia("neigh! bring\nme a carrot")
		dia("and i will\nhelp you")
		dia("proceed! take\nthese seeds")
		dia("and plant\nthem!")
		dia("[carrot seed\nget!]")
		givencarrotseed=true
		p.carrotseed=true
	elseif not gavehorsecarrot then
		if not p.carrot then
			dia("try planting\nthe carrot")
			dia("seeds in that\npatch of")
			dia("dirt over\nthere! then")
			dia("you should\nsleep for")
			dia("the night!\nneigh!")
		else
			dia("yummy! thank\nyou! here,")
			dia("take these\nodd seeds!")
			dia("[axe seed\nget!]")
			gavehorsecarrot=true
			p.carrot=false
			p.axeseed=true
		end
	else
		dia("neigh!")
	end
end

-->8
--farm

function init_farm()
	crops={}
	crops[1]={name="carrot",spr1=36,spr2=37}
	crops[2]={name="radish",spr1=52,spr2=53}
	crops[3]={name="tomato",spr1=38,spr2=39}
	crops[4]={name="corn",spr1=54,spr2=55}
	crops[5]={name="axe",spr1=34,spr2=35}
	plots={}
end

function get_plot(x,y)
	for p in all(plots) do
		if p.x==x and p.y==y then
			return p
		end
	end
end

function plant(x,y,crop)
	add(plots,{
		x=x,
		y=y,
		crop=crop,
		stage=1
	})
	dia(crops[crop].name.." seed\nplanted!")
end

--function grow(x,y)
--	local plot=get_plot(x,y)
--	plot.stage+=1
--end

function grow_plots()
	for plot in all(plots) do
		if (plot.stage==1) plot.stage+=1
	end
end

function harvest(x,y)
	local plot=get_plot(x,y)
	local name=crops[plot.crop].name
	dia(name.."\nget!")
	if plot.crop==5 then
		p.axe=true
	elseif plot.crop==1 then
		--temp
		p.carrot=true
	else
		p.crops[plot.crop]+=1
	end
	del(plots,plot)
end

function farm(x,y)
	local plot=get_plot(x,y)
	
	if plot==nil then
		--no crop here, plant one
		--plant(x,y,flr(rnd(5))+1)
		if p.axeseed then
			plant(x,y,5)
			p.axeseed=false
		elseif p.carrotseed then
			--temp until we have inv
			plant(x,y,1)
			p.carrotseed=false
		end
	elseif plot.stage==1 then
		--temp, force growth
		--grow(x,y)
		local name=crops[plot.crop].name
		dia(name.." seed")
	elseif plot.stage==2 then
		--harvest grown crop
		harvest(x,y)
	end
end

function draw_crops()
	for p in all(plots) do
		local c=crops[p.crop]
		if p.stage==1 then
			spr(c.spr1,p.x*8,p.y*8)
		elseif p.stage==2 then
			spr(c.spr2,p.x*8,p.y*8)
		end
	end
end

-->8
--ui

function init_ui()
	texts={}
	add_text(5,2,"moo!")
	add_text(4,6,"moo!")
	add_text(3,1,"* chicken\nnoise *")
	add_text(6,5,"* chicken\nnoise *")
	add_text(14,2,"talk to the\nhorse!")
	add_text(17,2,"★ farm ★\n(yours)")
	add_text(21,1,"that's it\nso far...")
	dias={}
end

function add_text(x,y,txt)
	texts[x+y*128]=txt
end

function get_text(x,y)
	if has_text(x,y) then
		return texts[x+y*128]
	else
		return nil
	end
end

function has_text(x,y)
	return texts[x+y*128]~=nil
end

function dia(txt)
	add(dias,txt)
end

function draw_text()
	local x=mx*8
	local y=my*8
	
	if (sleep) rectfill(x,y,x+64,y+64,0)
	
	if #dias>0 then
		active_text=dias[1]
	end
	
	if (active_text) then
		local tx=x+4
		local ty=y+48
		
		rectfill(tx,ty,tx+55,ty+14,7)
		print(active_text,tx+2,ty+2,1)
		print("🅾️",tx+48,ty+9,6)
	end
	
	if (btnp(🅾️)) then
		active_text=nil
		sleep=false
		if (#dias>0) del(dias,dias[1])
	end
end

__gfx__
0000000033333333333333333333333333333333333333330000000000000000000000000000000000aaaa0000aaaa0033333333ffffffffff4fffff33333333
00000000333333333b3b3333333663333333373333bbbb3300000000000000000000000000000000099999900999999034444443ff5454ffff4fffff44433443
007007003333333333b333333366663333337a733bbbbbb30000000000000000000000000000000000f1f100001f1f00341ff153f454545fff4fffff44444444
00077000333333333333333336666663333337333bbbbbb30000000000000000000000000000000000ffff0000ffff0034ff1f53445454544444444445444444
00077000333333333333333336666663337333333bbbbbb3000000000000000000000000000000000ee1e1e00e1e1ee034555553f454515fffff4fff44444454
00700700333333333333b3b33566666337a7333333bbbb33000000000000000000000000000000000fe1e1f00f1e1ef033345333f454515fffff4fff44444444
000000003333333333333b3333555553337333333334433300000000000000000000000000000000001111000011110033345333f454545fffff4fff44454444
00000000333333333333333333333333333333333333333300000000000000000000000000000000005005000050050033333333445454544444444444444444
33333333333333334343333333333434333333333333333300000000333333333333333333333333000000003333333333333333333333330000000044444444
33833333333338337741771111771477344444433355553300000000333553333335533333355333000000003344444444444444444444330000000045444444
39173333333371937177777117777717345444433544445300000000444544443335444444445333000000003444444444444444444444430000000044444454
33773333333377335771177117711775344445433544445300000000555545553335455555545333000000003444444445444444454444430000000044444444
33777773377777333311ee7777ee1133344444433544445300000000333543333335433333345333000000003444445444444454444444434000000044454444
33777763367777333317331771337133344544433544445300000000444544443335444444445333000000003444444444444444444444434778888444444444
33677633336776333377331771337733344444433355553300000000555545553335455555545333000000003445444444454444444544434444444434433444
333a3a3333a3a3333377337777337733333333333333333300000000333333333333433333343333000000003444444444444444444444434000000433333333
000000000000000033333333333d3333333333333333333333333333333b33333333433333343333000000000000000000000000000000003bb33bb333333333
000000000057750033555533335dd5333355553333b55533335555333b151533333553333335533300000000000000000000000000000000b1bbbb1b33555533
000000000577775035444753354df45335444953354b4b5335444853381b1453333543333334533300000000000000000000000000000000b1bbbb1b354b4453
00077000055775503574445335b4f4b335944453354bb4533584445335181b53333543333334533300000000000000000000000000000000bb8888bb3544b453
007777000555555035444453354bfb53354444533549945335444453351b1853333543333334533300000000000000000000000000000000bb8888bb35449453
0077770005555550354474533544445335449453354444533544845335444453333543333334533300000000000000000000000000000000bbbbbbbb35444453
00066000005555003355553333555533335555333355553333555533335555333335433333345333000000000000000000000000000000003bbbbbb333555533
0000000000000000333333333333333333333333333333333333333333333333333343333334333300000000000000000000000000000000bbb33bbb33333333
000000000000000034f33333000000003333333333333333333333333333b3a33333433333343333000000003444444444444444444444433bb33bb333333333
0000000000000000414f33330000000033555533335555b33355553333a5ba33333553333335533300000000344444444544444445444443b1bbbb1b33555533
0000000000000660444ff333000000003544425335b44b5335444a53354abb53333544444444533300000000344444544444445444444443b1bbbb1b35444b53
00000440000006603345554f0000000035244453354bb45335a44453354bb453333545555554533300000000344444444444444444444443bb8888bb3544b453
00044550066005503344554f000000003544445335422453354444533544b453333543333334533300000000344544444445444444454443bb8888bb35442453
04455000066000003344444f0000000035442453354444533544a45335444453333544444444533300000000344444444444444444444443bbbbbbbb35444453
0550000005500000334434430000000033555533335555333355553333555533333545555554533300000000334444444444444444444433344bb44333555533
00000000000000003355355300000000333333333333333333333333333333333333333333333333000000003333333333333333333333334443344433333333
__gff__
0000000100050000000000000101010001010101000300010101000000000000000000000000000001010000000001000000010000000000010100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
181717171717171918170e0e0e17171928040101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
281501110101042928010e0d0e01022928010102012e01040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
28150101011201292802010104010c29280c0101010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2815011b1c1c1c1d051b1c1c1c1c1d051b1c1c1c1c1c1d010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2815023b3c3c3c3d053b3c3c3c3c3d053b3c3c3c3c3c3d010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2815010101011029280101020101322928010101010201010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2815010413010129280401150101042928010201010101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
3817171717171739381717171717173928010101040101010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
